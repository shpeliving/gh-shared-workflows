name: Publish NPM package
on:
  workflow_call:
    inputs:
      package-name:
        type: string
        required: true
        description: The npm package name (the name is automatically prefixed with "@shpeliving/")
      build-directory:
        type: string
        required: true
        description: The directory where the package is built
    secrets:
      node-auth-token:
        required: true
        description: The npm token used for accessing the internal shpeliving repositories
      github-token:
        required: true
        description: The GitHub token used for accessing internal repositories
jobs:
  publish-npm:
    name: Publish NPM package
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        # actions/checkout@v4.1.1
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          token: ${{ secrets.github-token }}
      - name: Install dependencies
        run: npm ci
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.node-auth-token }}
      - name: Build package
        run: npm run build:package
        shell: bash
      - name: Get latest package version
        id: latest_version
        run: |
          LATEST_PACKAGE_VERSION=$(npm show @shpeliving/${{ inputs.package-name }} version)
          echo "Latest version: ${LATEST_PACKAGE_VERSION}"
          echo "LATEST_VERSION=${LATEST_PACKAGE_VERSION}" >> $GITHUB_ENV
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.node-auth-token }}
      - name: Publish package
        run: |
          cd ${{ inputs.build-directory }}

          json_tmp=`cat package.json`
          jq '.name = "@shpeliving/${{ inputs.package-name }}"' <<< $json_tmp > package.json

          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            # split the version string into an array using the "." delimiter
            IFS='.' read -ra VERSION_ARRAY <<< "$LATEST_VERSION"
            # increment the minor version by one
            (( VERSION_ARRAY[1]++ ))
            # set the patch version to 0
            VERSION_ARRAY[2]=0
            echo $VERSION_ARRAY
            # join the version array elements using the "." delimiter
            new_version=$( IFS='.' ; echo "${VERSION_ARRAY[*]:0:3}" )
            echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
            npm version "$new_version" --no-git-tag-version --force --allow-same-version
            npm publish --access public
          else
            branch_name=$(echo ${GITHUB_REF##*/})
            version_suffix="beta-${branch_name}.${GITHUB_RUN_NUMBER}"
            npm version "$LATEST_VERSION" --no-git-tag-version --force --allow-same-version
            published_version=$(npm version prerelease --preid="$version_suffix" --no-git-tag-version --force --allow-same-version)
            echo $published_version
            npm publish --tag beta --access public
            echo "PUBLISHED_VERSION=$published_version" >> $GITHUB_ENV
          fi
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.node-auth-token }}
      - name: Add published version comment
        if: github.event_name == 'pull_request'
        # peter-evans/create-or-update-comment@v3.1.0
        uses: peter-evans/create-or-update-comment@23ff15729ef2fc348714a3bb66d2f655ca9066f2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Published BETA version
            ### ${{ env.PUBLISHED_VERSION }}
          edit-mode: replace
      - name: Publish UMD
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            cd build
            npm run build:umd

            file_name=./${{ inputs.package-name }}.umd-${NEW_VERSION}.js
            mv ./${{ inputs.package-name }}.umd.js ${file_name}

            # Copy dst to bucket
            gsutil -m cp -r ./${file_name} gs://public-proto-bucket-dev
            gsutil -m cp -r ./${file_name} gs://public-proto-bucket-prod
          else
            echo "NONE"
          fi
        shell: bash
