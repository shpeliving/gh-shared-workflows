name: Factory - Run Tests
on:
  workflow_call:
    inputs:
      bucket-names:
        type: string
        required: true
        description: The GCP buckets that are going to be created
      project-id:
        type: string
        required: true
        description: The default GCP project
      with-emulators:
        type: string
        required: false
        description: Start the emulators or not
        default: "true"
      main-directory:
        type: string
        required: false
        description: The main directory of the project
        default: "."
    secrets:
      github-token:
        required: true
        description: The GitHub token used for accessing internal repositories
jobs:
  run-tests:
    name: Run Tests
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        # actions/checkout@v4.1.7
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          token: ${{ secrets.github-token }}
      - name: Setup Access to Private Repositories
        run: git config --global url."https://${{ secrets.github-token }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
        shell: bash
      - name: Download Modules
        run: go mod download
        shell: bash
      - name: Start Emulators
        run: |
          buckets.sh
          watchdog > /tmp/watchdog.log 2>&1 &
          echo "Waiting 10 seconds for watchdog to start emulators..."
          sleep 10
          cat /tmp/watchdog.log
        shell: bash
        env:
          BUCKET_NAMES: ${{ inputs.bucket-names }}
          DEFAULT_GCP_PROJECT: ${{ inputs.project-id }}
          WATCHDOG_SKIP_HARD_KILL: 1
        if: inputs.with-emulators == 'true'
      - name: Run Tests
        run: gotestsum --format github-actions --junitfile /tmp/tests-junit.xml -- -cover -coverprofile=/tmp/tests-cover.out ./...
        working-directory: ${{ inputs.main-directory }}
        shell: bash
      - name: Prepare Coverage Report
        if: always()
        run: go tool cover -html=/tmp/tests-cover.out -o /tmp/tests-cover.html
        shell: bash
      - name: Upload Tests JUnit XML File
        # actions/upload-artifact@v4.3.4
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b
        if: always()
        with:
          name: tests-junit
          path: /tmp/tests-junit.xml
          if-no-files-found: ignore
      - name: Upload Tests Coverage HTML File
        # actions/upload-artifact@v4.3.4
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b
        if: always()
        with:
          name: tests-coverage
          path: /tmp/tests-cover.html
          if-no-files-found: ignore
      - name: Tests Summary
        # test-summary/action@v2.4
        uses: test-summary/action@31493c76ec9e7aa675f1585d3ed6f1da69269a86
        if: always()
        with:
          paths: "/tmp/tests-junit.xml"
      - name: Tests Reporter
        # dorny/test-reporter@v1.9.1
        uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
        if: always()
        with:
          name: Factory Tests Result
          path: /tmp/tests-junit.xml
          reporter: java-junit
          fail-on-error: 'true'
# Takes too long to run
#      - name: Coverage Reporter
#        # fgrosse/go-coverage-report@v1.0.2
#        uses: fgrosse/go-coverage-report@ff33f0f3f96d20ecb97198100852d2af288094ff
#        if: always()
#        with:
#          coverage-artifact-name: tests-coverage
#          coverage-file-name: tests-cover.out
      - name: Stop emulators
        if: always() && inputs.with-emulators == 'true'
        run: ps axu | grep watchdog | grep -v grep | awk '{print $2}' | xargs kill -SIGINT || true
        shell: bash
        continue-on-error: true
